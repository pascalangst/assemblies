theme_bw() +
theme(axis.text=element_text(size=15), axis.title=element_text(size=15), legend.text = element_text(size=15)) +
scale_x_discrete(guide = guide_axis(n.dodge = 2), labels = c("spring to summer", "summer to spring")) +
ylim(c(-8.4, -0.6))
# trafo
means_untrafo <- plot.frame %>%
group_by(comp) %>%
dplyr::summarize(Mean = mean(FST, na.rm=TRUE))
plot.frame %>%
group_by(comp) %>%
dplyr::summarize(Mean = mean(FST, na.rm=TRUE))
plot.frame %>%
group_by(comp) %>%
dplyr::summarize(Mean = median(FST, na.rm=TRUE))
# trafo
means_untrafo <- plot.frame %>%
group_by(comp) %>%
dplyr::summarize(Mean = median(FST, na.rm=TRUE))
for (i in 1:length(FSTdata_cov_ponds)) {
if (is.data.frame(FSTdata_cov_ponds[[i]])){
names.vector <- c(names.vector, names(FSTdata_cov_ponds[i]))
}
}
# all delta
plot.frame <- rbind(data.frame(FST = spring.vector, comp = "sprspr", row.names = paste0(names.vector,"_sprspr")),
data.frame(FST = summer.vector, comp = "smrsmr", row.names = paste0(names.vector,"_smrsmr")),
data.frame(FST = sprsmr.vector, comp = "sprsmr", row.names = paste0(names.vector,"_sprsmr")),
data.frame(FST = smrspr.vector, comp = "smrspr", row.names = paste0(names.vector,"_smrspr")))
# calculate significance for:
my_comparisons <- list( c("smrsmr", "sprsmr"), c("sprspr", "sprsmr"), c("smrspr", "sprsmr") )
# boxplot
ggboxplot(plot.frame, x = "comp", y = "FST", notch = F, xlab = "", ylab = "pairwise FST", main = "") +
stat_compare_means(comparisons = my_comparisons, paired = T, method = "wilcox.test", size = 5) + # add pairwise comparisons p-value
stat_compare_means(label.y = 0.58, label.x = 0.75, size = 5) +    # add global p-value
stat_summary(fun.data = function(x) data.frame(y=-0.05, label = paste("Mean =",round(mean(x), digits = 3))), geom="text", size = 5) +# add mean values
theme_bw() +
theme(axis.text=element_text(size=15), axis.title=element_text(size=15), legend.text = element_text(size=15))
wilcox.test(plot.frame[plot.frame$comp == "sprsmr",]$FST, plot.frame[plot.frame$comp == "smrspr",]$FST, paired = T)
plot.frame %>%
group_by(comp) %>%
dplyr::summarize(Mean = median(FST, na.rm=TRUE))
# all delta
plot.frame <- rbind(data.frame(FST = spring.vector, comp = "sprspr", row.names = paste0(names.vector,"_sprspr")),
data.frame(FST = summer.vector, comp = "smrsmr", row.names = paste0(names.vector,"_smrsmr")),
data.frame(FST = sprsmr.vector, comp = "sprsmr", row.names = paste0(names.vector,"_sprsmr")),
data.frame(FST = smrspr.vector, comp = "smrspr", row.names = paste0(names.vector,"_smrspr")))
plot.frame %>%
group_by(comp) %>%
dplyr::summarize(Mean = median(FST, na.rm=TRUE))
plot.frame %>%
group_by(comp) %>%
dplyr::summarize(Mean = mean(FST, na.rm=TRUE))
log((0.001 + plot.frame$FST)/(1 + 0.001 + plot.frame$FST))
plot.frame
# all delta
plot.frame <- rbind(data.frame(FST = spring.vector, comp = "sprspr", row.names = paste0(names.vector,"_sprspr")),
data.frame(FST = summer.vector, comp = "smrsmr", row.names = paste0(names.vector,"_smrsmr")),
data.frame(FST = sprsmr.vector, comp = "sprsmr", row.names = paste0(names.vector,"_sprsmr")),
data.frame(FST = smrspr.vector, comp = "smrspr", row.names = paste0(names.vector,"_smrspr")))
plot.frame
spring.vector
rm(plot.frame)
# all delta
plot.frame <- rbind(data.frame(FST = spring.vector, comp = "sprspr", row.names = paste0(names.vector,"_sprspr")),
data.frame(FST = summer.vector, comp = "smrsmr", row.names = paste0(names.vector,"_smrsmr")),
data.frame(FST = sprsmr.vector, comp = "sprsmr", row.names = paste0(names.vector,"_sprsmr")),
data.frame(FST = smrspr.vector, comp = "smrspr", row.names = paste0(names.vector,"_smrspr")))
### delta per year or season
set.seed(123)
# vector for delta spring
spring.vector <- vector()
for (i in 1:length(FSTdata_cov_ponds)) {
if (is.data.frame(FSTdata_cov_ponds[[i]])){
# same season
FSTdata_cov_ponds.tmp <- FSTdata_cov_ponds[[i]][grep("spr",rownames(FSTdata_cov_ponds[[i]])), grep(paste(c("spr","year","season"), collapse = "|"),colnames(FSTdata_cov_ponds[[i]]))]
# delta age calculation
age_matrix <- outer(as.numeric(unlist(FSTdata_cov_ponds.tmp["year"])) + as.numeric(unlist(FSTdata_cov_ponds.tmp["season"])),as.numeric(unlist(FSTdata_cov_ponds.tmp["year"])) + as.numeric(unlist(FSTdata_cov_ponds.tmp["season"])),custom_fun)
# diff 1 year
FSTdata_cov_ponds.season <- FSTdata_cov_ponds.tmp[-c(ncol(FSTdata_cov_ponds.tmp)-1, ncol(FSTdata_cov_ponds.tmp))][age_matrix == 1 & lower.tri(age_matrix)]
# add to vector
#spring.vector <- c(spring.vector, mean(FSTdata_cov_ponds.season))
#spring.vector <- c(spring.vector, FSTdata_cov_ponds.season)
if (length(FSTdata_cov_ponds.season)!=0) {
spring.vector <- c(spring.vector, sample(FSTdata_cov_ponds.season, 1))
}else {spring.vector <- c(spring.vector,NA)}
}
}
# vector for delta summer
summer.vector <- vector()
for (i in 1:length(FSTdata_cov_ponds)) {
if (is.data.frame(FSTdata_cov_ponds[[i]])){
# same season
FSTdata_cov_ponds.tmp <- FSTdata_cov_ponds[[i]][grep("smr",rownames(FSTdata_cov_ponds[[i]])), grep(paste(c("smr","year","season"), collapse = "|"),colnames(FSTdata_cov_ponds[[i]]))]
# delta age calculation
age_matrix <- outer(as.numeric(unlist(FSTdata_cov_ponds.tmp["year"])) + as.numeric(unlist(FSTdata_cov_ponds.tmp["season"])),as.numeric(unlist(FSTdata_cov_ponds.tmp["year"])) + as.numeric(unlist(FSTdata_cov_ponds.tmp["season"])),custom_fun)
# diff 1 year
FSTdata_cov_ponds.season <- FSTdata_cov_ponds.tmp[-c(ncol(FSTdata_cov_ponds.tmp)-1, ncol(FSTdata_cov_ponds.tmp))][age_matrix == 1 & lower.tri(age_matrix)]
# add to vector
#summer.vector <- c(summer.vector, mean(FSTdata_cov_ponds.season))
#summer.vector <- c(summer.vector, FSTdata_cov_ponds.season)
if (length(FSTdata_cov_ponds.season)!=0) {
summer.vector <- c(summer.vector, sample(FSTdata_cov_ponds.season, 1))
}else {summer.vector <- c(summer.vector,NA)}
}
}
# vector for delta active season
sprsmr.vector <- vector()
for (i in 1:length(FSTdata_cov_ponds)) {
if (is.data.frame(FSTdata_cov_ponds[[i]])){
# delta age calculation
age_matrix <- outer(as.numeric(unlist(FSTdata_cov_ponds[[i]]["year"])) + as.numeric(unlist(FSTdata_cov_ponds[[i]]["season"])),as.numeric(unlist(FSTdata_cov_ponds[[i]]["year"])) + as.numeric(unlist(FSTdata_cov_ponds[[i]]["season"])),custom_fun)
# diff 0.2 year
FSTdata_cov_ponds.season <- FSTdata_cov_ponds[[i]][-seq(ncol(FSTdata_cov_ponds[[i]])-3, ncol(FSTdata_cov_ponds[[i]]))][age_matrix == "0.2" & lower.tri(age_matrix)]
# add to vector
#sprsmr.vector <- c(sprsmr.vector, mean(FSTdata_cov_ponds.season))
#sprsmr.vector <- c(sprsmr.vector, FSTdata_cov_ponds.season)
if (length(FSTdata_cov_ponds.season)!=0) {
sprsmr.vector <- c(sprsmr.vector, sample(FSTdata_cov_ponds.season, 1))
}else {sprsmr.vector <- c(sprsmr.vector,NA)}
}
}
# vector for delta dormant season
smrspr.vector <- vector()
for (i in 1:length(FSTdata_cov_ponds)) {
if (is.data.frame(FSTdata_cov_ponds[[i]])){
# delta age calculation
age_matrix <- outer(as.numeric(unlist(FSTdata_cov_ponds[[i]]["year"])) + as.numeric(unlist(FSTdata_cov_ponds[[i]]["season"])),as.numeric(unlist(FSTdata_cov_ponds[[i]]["year"])) + as.numeric(unlist(FSTdata_cov_ponds[[i]]["season"])),custom_fun)
# diff 0.8 year
FSTdata_cov_ponds.season <- FSTdata_cov_ponds[[i]][-seq(ncol(FSTdata_cov_ponds[[i]])-3, ncol(FSTdata_cov_ponds[[i]]))][age_matrix == "0.8" & lower.tri(age_matrix)]
# add to vector
#smrspr.vector <- c(smrspr.vector, mean(FSTdata_cov_ponds.season))
#smrspr.vector <- c(smrspr.vector, FSTdata_cov_ponds.season)
if (length(FSTdata_cov_ponds.season)!=0) {
smrspr.vector <- c(smrspr.vector, sample(FSTdata_cov_ponds.season, 1))
}else {smrspr.vector <- c(smrspr.vector,NA)}
}
}
# pond names
names.vector <- vector()
for (i in 1:length(FSTdata_cov_ponds)) {
if (is.data.frame(FSTdata_cov_ponds[[i]])){
names.vector <- c(names.vector, names(FSTdata_cov_ponds[i]))
}
}
# all delta
plot.frame <- rbind(data.frame(FST = spring.vector, comp = "sprspr", row.names = paste0(names.vector,"_sprspr")),
data.frame(FST = summer.vector, comp = "smrsmr", row.names = paste0(names.vector,"_smrsmr")),
data.frame(FST = sprsmr.vector, comp = "sprsmr", row.names = paste0(names.vector,"_sprsmr")),
data.frame(FST = smrspr.vector, comp = "smrspr", row.names = paste0(names.vector,"_smrspr")))
plot.frame
plot.frame %>%
group_by(comp) %>%
dplyr::summarize(Mean = mean(FST, na.rm=TRUE))
plot.frame %>%
group_by(comp) %>%
dplyr::summarize(Mean = median(FST, na.rm=TRUE))
log(0.012/(1-0.012))
log(0.001/(1-0.001))
log(0.002/(1-0.002))
log(0.013/(1-0.013))
selectionStats_Glugo <- read.delim("~/Downloads/selectionStats_Glugo.txt")
selectionStats_Glugo$Alignment <- gsub(".allmasked.fasta.oneline", "", selectionStats_Glugo$Alignment)
selectionStats_Glugo$pin <- selectionStats_Glugo$PiN / selectionStats_Glugo$NumN
selectionStats_Glugo$pis <- selectionStats_Glugo$PiS / selectionStats_Glugo$NumS
selectionStats_Glugo$pi_ratio <- selectionStats_Glugo$pin /selectionStats_Glugo$pis
summary(selectionStats_Glugo)
hist(selectionStats_Glugo$pin, breaks = 20)
hist(selectionStats_Glugo$pis, breaks = 20)
hist(selectionStats_Glugo$pi_ratio, breaks = 20)
paml_Glugo <- read.delim("~/Downloads/PAML_DnDs_Estimates_aligned_masked_Glugo.tsv", header = F)
colnames(paml_Glugo) <- c("Alignment", "t", "S", "N", "dN/dS", "dN", "dS")
paml_Glugo$Alignment <- gsub(".aligned_masked", "", paml_Glugo$Alignment)
### merge
stats_table_glugo <- merge(selectionStats_Glugo, paml_Glugo, by = "Alignment")
View(stats_table_glugo)
stats_table_glugo[order(stats_table_glugo$pi_ratio, decreasing = 1),]
order(stats_table_glugo$pi_ratio, decreasing = 1)
order(stats_table_glugo$pi_ratio, decreasing = 1, na.last = T)
library(dplyr)
stats_table_glugo %>%
arrange(desc(pi_ratio))
stats_table_glugo %>%
arrange(Alignment, desc(pi_ratio))
stats_table_glugo %>%
()
stats_table_glugo %>% summarise()
merge(selectionStats_Glugo, paml_Glugo, by = "Alignment")[-1]
merge(selectionStats_Glugo, paml_Glugo, by = "Alignment")[:-1]
merge(selectionStats_Glugo, paml_Glugo, by = "Alignment")[,-1]
merge(selectionStats_Glugo, paml_Glugo, by = "Alignment")[-c("NA")]
merge(selectionStats_Glugo, paml_Glugo, by = "Alignment")[c("NA")]
merge(selectionStats_Glugo, paml_Glugo, by = "Alignment")[c("NA"),]
merge(selectionStats_Glugo, paml_Glugo, by = "Alignment")[,c("NA")]
View(stats_table_glugo)
### merge
stats_table_glugo <- merge(selectionStats_Glugo, paml_Glugo, by = "Alignment")[,c("")]
conames(stats_table_glugo)
colnames(stats_table_glugo)
merge(selectionStats_Glugo, paml_Glugo, by = "Alignment")[,c(NA)]
merge(selectionStats_Glugo, paml_Glugo, by = "Alignment")[,NA]
merge(selectionStats_Glugo, paml_Glugo, by = "Alignment")[NA]
merge(selectionStats_Glugo, paml_Glugo, by = "Alignment")["NA"]
### merge
stats_table_glugo <- merge(selectionStats_Glugo, paml_Glugo, by = "Alignment")[-(ncol(selectionStats_Glugo)+ncol(paml_Glugo))]
(ncol(selectionStats_Glugo)+ncol(paml_Glugo))
### merge
stats_table_glugo <- merge(selectionStats_Glugo, paml_Glugo, by = "Alignment")[-(ncol(selectionStats_Glugo)+ncol(paml_Glugo)-1)]
library(dplyr)
stats_table_glugo %>%
arrange(desc(pi_ratio))
stats_table_glugo %>%
arrange(desc(is.finite(pi_ratio)))
tail(stats_table_glugo %>%
arrange(desc(is.finite(pi_ratio))))
tail(stats_table_glugo %>%
arrange(desc(is.finite(pi_ratio)), desc(pi_ratio)))
stats_table_glugo %>%
arrange(desc(is.finite(pi_ratio)), desc(pi_ratio))
View(stats_table_glugo)
paml_Mito <- read.delim("~/Downloads/PAML_DnDs_Estimates_aligned_masked_Mito.tsv", header = F)
colnames(paml_Mito) <- c("Alignment", "t", "S", "N", "dN/dS", "dN", "dS")
paml_Mito$Alignment <- gsub(".aligned_masked", "", paml_Mito$Alignment)
stats_table_Mito <- merge(selectionStats_Mito, paml_Mito, by = "Alignment")[-(ncol(selectionStats_Mito)+ncol(paml_Mito)-1)]
selectionStats_Mito <- read.delim("~/Downloads/selectionStats_Mito.txt")
selectionStats_Mito$Alignment <- gsub(".allmasked.fasta.oneline", "", selectionStats_Mito$Alignment)
selectionStats_Mito$pin <- selectionStats_Mito$PiN / selectionStats_Mito$NumN
selectionStats_Mito$pis <- selectionStats_Mito$PiS / selectionStats_Mito$NumS
selectionStats_Mito$pi_ratio <- selectionStats_Mito$pin /selectionStats_Mito$pis
summary(selectionStats_Mito)
hist(selectionStats_Mito$pin, breaks = 20)
hist(selectionStats_Mito$pis, breaks = 20)
hist(selectionStats_Mito$pi_ratio, breaks = 20)
paml_Mito <- read.delim("~/Downloads/PAML_DnDs_Estimates_aligned_masked_Mito.tsv", header = F)
colnames(paml_Mito) <- c("Alignment", "t", "S", "N", "dN/dS", "dN", "dS")
paml_Mito$Alignment <- gsub(".aligned_masked", "", paml_Mito$Alignment)
stats_table_Mito <- merge(selectionStats_Mito, paml_Mito, by = "Alignment")[-(ncol(selectionStats_Mito)+ncol(paml_Mito)-1)]
library(dplyr)
stats_table_Mito[order(stats_table_Mito$pi_ratio, decreasing = 1, ),]
stats_table_Mito %>%
arrange(desc(is.finite(pi_ratio)), desc(pi_ratio))
proteinortho_out <- read.delim("/Users/pascal/Downloads/proteinortho-output_240108_Gi_Md.proteinortho.tsv")
proteinortho_out
proteinortho_out[proteinortho_out$X..Species == 2 & proteinortho_out$Genes == 2,]
proteinortho_singleCopy <- proteinortho_out[proteinortho_out$X..Species == 2 & proteinortho_out$Genes == 2,]
stats_table_glugo[stats_table_glugo$pi_ratio > 1,]$Alignment
stats_table_glugo[stats_table_glugo$pi_ratio > 1 & is.numeric(stats_table_glugo$pi_ratio),]$Alignment
stats_table_glugo[stats_table_glugo$pi_ratio > 1,]$Alignment
stats_table_glugo[stats_table_glugo$pi_ratio > 1,]
stats_table_glugo[stats_table_glugo$pi_ratio > 1 & is.numeric(stats_table_glugo$pi_ratio),]
stats_table_glugo[stats_table_glugo$pi_ratio > 1 & is.finite(stats_table_glugo$pi_ratio),]
stats_table_glugo[stats_table_glugo$pi_ratio > 1 & is.finite(stats_table_glugo$pi_ratio),]$Alignment
glugo_piratio_candidates <- stats_table_glugo[stats_table_glugo$pi_ratio > 1 & is.finite(stats_table_glugo$pi_ratio),]$Alignment
union(proteinortho_singleCopy$Glugoides_intestinalis_IL.YERU.16.proteins.fa, glugo_piratio_candidates)
intersect(proteinortho_singleCopy$Glugoides_intestinalis_IL.YERU.16.proteins.fa, glugo_piratio_candidates)
glugo_piratio_candidates <- gsub("-T1", "", stats_table_glugo[stats_table_glugo$pi_ratio > 1 & is.finite(stats_table_glugo$pi_ratio),]$Alignment
)
intersect(proteinortho_singleCopy$Glugoides_intestinalis_IL.YERU.16.proteins.fa, glugo
)
intersect(proteinortho_singleCopy$Glugoides_intestinalis_IL.YERU.16.proteins.fa, glugo_piratio_candidates)
glugo_piratio_candidates
intersect(gsub("-T1", "", proteinortho_singleCopy$Glugoides_intestinalis_IL.YERU.16.proteins.fa), glugo_piratio_candidates)
proteinortho_singleCopy$Glugoides_intestinalis_IL.YERU.16.proteins.fa <- gsub("-T1", "", proteinortho_singleCopy$Glugoides_intestinalis_IL.YERU.16.proteins.fa)
View(proteinortho_out)
proteinortho$Glugoides_intestinalis_IL.YERU.16.proteins.fa <- gsub("-T1", "", proteinortho_singleCopy$Glugoides_intestinalis_IL.YERU.16.proteins.fa)
View(proteinortho_out)
proteinortho_out$Glugoides_intestinalis_IL.YERU.16.proteins.fa <- gsub("-T1", "", proteinortho_out$Glugoides_intestinalis_IL.YERU.16.proteins.fa)
View(proteinortho_out)
proteinortho_out$Mitosporidium_daphniae_SP.proteins.fa <- gsub("-T1", "", proteinortho_out$Mitosporidium_daphniae_SP.proteins.fa)
View(proteinortho_out)
proteinortho_singleCopy <- proteinortho_out[proteinortho_out$X..Species == 2 & proteinortho_out$Genes == 2,]
glugo_piratio_candidates <- stats_table_glugo[stats_table_glugo$pi_ratio > 1 & is.finite(stats_table_glugo$pi_ratio),]$Alignment
proteinortho_singleCopy[proteinortho_out$Glugoides_intestinalis_IL.YERU.16.proteins.fa %in% glugo_piratio_candidates]
proteinortho_singleCopy[proteinortho_out$Glugoides_intestinalis_IL.YERU.16.proteins.fa %in% glugo_piratio_candidates,]
proteinortho_out$Glugoides_intestinalis_IL.YERU.16.proteins.fa %in% glugo_piratio_candidates
glugo_piratio_candidates
proteinortho_singleCopy[proteinortho_singleCopy$Glugoides_intestinalis_IL.YERU.16.proteins.fa %in% glugo_piratio_candidates,]
mito_piratio_candidates <- stats_table_glugo[stats_table_Mito$pi_ratio > 1 & is.finite(stats_table_Mito$pi_ratio),]$Alignment
mito_piratio_candidates
mito_piratio_candidates <- stats_table_Mito[stats_table_Mito$pi_ratio > 1 & is.finite(stats_table_Mito$pi_ratio),]$Alignment
mito_piratio_candidates
proteinortho_singleCopy[proteinortho_singleCopy$Mitosporidium_daphniae_SP.proteins.fa %in% mito_piratio_candidates,]
my_files <- paste0("~/Downloads/nucleotide_composition_GB-ELK1-1.busco.blast.self/", my_files)
my_files <- list.files(pattern = "tsv$", recursive=T, path = "~/Downloads/nucleotide_composition_GB-ELK1-1.busco.blast.self/")
my_names <- gsub("GB-ELK1-1.busco.blast.self.", "", gsub(".tsv", "", my_files))
my_files <- paste0("~/Downloads/nucleotide_composition_GB-ELK1-1.busco.blast.self/", my_files)
my_tables <- lapply(my_files, read.table, header=F)
names(my_tables) <- my_names
names(my_tables)
modified_bases.5mC.bed <- read.delim("~/Downloads/output.hifi.call_mods.modbam.pbmm2.freq.aggregate.all.bedmethyl", header=FALSE)
modified_bases.5mC.bed
unique(modified_bases.5mC.bed$V1
)
for (i in unique(modified_bases.5mC.bed$V1)){
data <- modified_bases.5mC.bed[modified_bases.5mC.bed$V1==i,]
data_nucl <- nucleotide_composition[nucleotide_composition$name==i,]
p1 <- ggplot(data, aes(V2, V11)) + geom_point() + ylim(0,100) + xlab(paste("position in", i)) + ylab("% 5-mC methyl. based on reads") + theme_bw()
#p2 <- ggplot(data, aes(V2, V12)) + geom_point() + ylim(0,100) + xlab(paste("position in", i)) + ylab("% 5-hmC methyl. based on reads") + theme_bw()
p3 <- ggplot(data_nucl, aes(V1, V3)) + geom_point() + geom_smooth() + ylim(0,100) + xlab(paste("position in", i)) + ylab("% AT") + theme_bw()
p4 <- ggplot(data, aes(V2, V5)) + geom_point() + ylim(0,80) + xlab(paste("position in", i)) + ylab("Number of reads") + geom_smooth() + theme_bw()
#arrange <- ggarrange(p1,p2,p3,p4, ncol = 1, nrow = 4)
arrange <- ggarrange(p1,p3,p4, ncol = 1, nrow = 3)
#ggsave(paste0(i, ".png"), arrange, height = 10, width = 7)
ggsave(paste0(i, ".png"), arrange, height = 7.5, width = 7)
}
for (i in 1:(length(my_tables))) {
my_tables[[i]]$name <- names(my_tables[i])
}
nucleotide_composition <- as.data.frame(do.call("rbind",my_tables))
for (i in unique(modified_bases.5mC.bed$V1)){
data <- modified_bases.5mC.bed[modified_bases.5mC.bed$V1==i,]
data_nucl <- nucleotide_composition[nucleotide_composition$name==i,]
p1 <- ggplot(data, aes(V2, V11)) + geom_point() + ylim(0,100) + xlab(paste("position in", i)) + ylab("% 5-mC methyl. based on reads") + theme_bw()
#p2 <- ggplot(data, aes(V2, V12)) + geom_point() + ylim(0,100) + xlab(paste("position in", i)) + ylab("% 5-hmC methyl. based on reads") + theme_bw()
p3 <- ggplot(data_nucl, aes(V1, V3)) + geom_point() + geom_smooth() + ylim(0,100) + xlab(paste("position in", i)) + ylab("% AT") + theme_bw()
p4 <- ggplot(data, aes(V2, V5)) + geom_point() + ylim(0,80) + xlab(paste("position in", i)) + ylab("Number of reads") + geom_smooth() + theme_bw()
#arrange <- ggarrange(p1,p2,p3,p4, ncol = 1, nrow = 4)
arrange <- ggarrange(p1,p3,p4, ncol = 1, nrow = 3)
#ggsave(paste0(i, ".png"), arrange, height = 10, width = 7)
ggsave(paste0(i, ".png"), arrange, height = 7.5, width = 7)
}
library(ggplot2)
for (i in unique(modified_bases.5mC.bed$V1)){
data <- modified_bases.5mC.bed[modified_bases.5mC.bed$V1==i,]
data_nucl <- nucleotide_composition[nucleotide_composition$name==i,]
p1 <- ggplot(data, aes(V2, V11)) + geom_point() + ylim(0,100) + xlab(paste("position in", i)) + ylab("% 5-mC methyl. based on reads") + theme_bw()
#p2 <- ggplot(data, aes(V2, V12)) + geom_point() + ylim(0,100) + xlab(paste("position in", i)) + ylab("% 5-hmC methyl. based on reads") + theme_bw()
p3 <- ggplot(data_nucl, aes(V1, V3)) + geom_point() + geom_smooth() + ylim(0,100) + xlab(paste("position in", i)) + ylab("% AT") + theme_bw()
p4 <- ggplot(data, aes(V2, V5)) + geom_point() + ylim(0,80) + xlab(paste("position in", i)) + ylab("Number of reads") + geom_smooth() + theme_bw()
#arrange <- ggarrange(p1,p2,p3,p4, ncol = 1, nrow = 4)
arrange <- ggarrange(p1,p3,p4, ncol = 1, nrow = 3)
#ggsave(paste0(i, ".png"), arrange, height = 10, width = 7)
ggsave(paste0(i, ".png"), arrange, height = 7.5, width = 7)
}
install.packages("ggarrange")
library(ggpubr)
for (i in unique(modified_bases.5mC.bed$V1)){
data <- modified_bases.5mC.bed[modified_bases.5mC.bed$V1==i,]
data_nucl <- nucleotide_composition[nucleotide_composition$name==i,]
p1 <- ggplot(data, aes(V2, V11)) + geom_point() + ylim(0,100) + xlab(paste("position in", i)) + ylab("% 5-mC methyl. based on reads") + theme_bw()
#p2 <- ggplot(data, aes(V2, V12)) + geom_point() + ylim(0,100) + xlab(paste("position in", i)) + ylab("% 5-hmC methyl. based on reads") + theme_bw()
p3 <- ggplot(data_nucl, aes(V1, V3)) + geom_point() + geom_smooth() + ylim(0,100) + xlab(paste("position in", i)) + ylab("% AT") + theme_bw()
p4 <- ggplot(data, aes(V2, V5)) + geom_point() + ylim(0,80) + xlab(paste("position in", i)) + ylab("Number of reads") + geom_smooth() + theme_bw()
#arrange <- ggarrange(p1,p2,p3,p4, ncol = 1, nrow = 4)
arrange <- ggarrange(p1,p3,p4, ncol = 1, nrow = 3)
#ggsave(paste0(i, ".png"), arrange, height = 10, width = 7)
ggsave(paste0(i, ".png"), arrange, height = 7.5, width = 7)
}
samplenames <- system("bcftools query -l ~/Downloads/Ht_2014-2018_all_220329.fix.SNP_QUAL_MaxDP-2mode_filter.merged.vcf.gz", intern = TRUE)
library(poolfstat)
pooldata<-vcf2pooldata("~/Downloads/Ht_2014-2018_all_220329.fix.SNP_QUAL_MaxDP-2mode_filter.merged.vcf.gz", poolsizes=rep(100,length(samplenames)), poolnames=samplenames)
pooldata_sub <- pooldata.subset(pooldata = pooldata, pool.index = which(pooldata@poolnames %in% c("LA-20_smr2015", "LA-16_smr2015", "N-71_smr2014", "SK-45_smr2015")))
PairwiseFST<-compute.pairwiseFST(pooldata_sub, output.snp.values =T)
freq <- pooldata@refallele.readcount/pooldata@readcoverage
par(mfrow = c(3,1))
plot(pooldata_sub@refallele.readcount[,1], main = pooldata_sub@poolnames[1], ylim = c(1,300), ylab = "AD")
plot(pooldata_sub@readcoverage[,1], main = pooldata_sub@poolnames[1], ylim = c(1,300), ylab = "DP")
plot(freq[,which(pooldata@poolnames == pooldata_sub@poolnames[1])], main = pooldata_sub@poolnames[1], ylab = "AF")
par(mfrow = c(1,1))
hist(pooldata_sub@refallele.readcount[,1])
par(mfrow = c(1,1))
hist(pooldata_sub@refallele.readcount[,1], xlim = c(0,200))
par(mfrow = c(1,1))
hist(pooldata_sub@refallele.readcount[,1], xlim = c(0,200), breaks = 200)
par(mfrow = c(1,1))
hist(pooldata_sub@refallele.readcount[,1], xlim = c(0,200), breaks = 300)
par(mfrow = c(1,1))
hist(pooldata_sub@refallele.readcount[,1], xlim = c(0,200), breaks = 400)
par(mfrow = c(1,1))
hist(pooldata_sub@refallele.readcount[,1], xlim = c(0,200), breaks = 500)
par(mfrow = c(1,1))
hist(freq[,which(pooldata@poolnames == pooldata_sub@poolnames[1])])
library(ComplexHeatmap)
library(stringr)
library(dplyr)
library(circlize)
library(data.table)
library(zoo)
library(tidyverse)
setwd("~/OneDrive - Universität Basel/assemblies/Spirobacillus_cienkowskii_FI-SP1/bakta_tmp/circos/")
#################################################################################
#### Extract CDS rRNA tRNA etc ####
################################################################################
spiro_prot_plus= read.delim("features-plus.txt", sep=" ", header=F,stringsAsFactors = FALSE) ### features plus strand
spiro_prot_minus= read.delim("features-minus.txt", sep=" ", header=F,stringsAsFactors = FALSE)### features minus strand
colnames(spiro_prot_minus)=c("contig_names","xstart","xend","orientation","color")
colnames(spiro_prot_plus)=c("contig_names","xstart","xend","orientation","color")
spiro_prot_plus=spiro_prot_plus %>% mutate( ystart= 2.1, yend=3) ### create the coordinates of the features
spiro_prot_minus=spiro_prot_minus %>% mutate( ystart= 1, yend=1.9) ### create the coordinates of the features
spiro_size=2806830
### there is probably an other way to read the color
spiro_prot_plus=mutate(spiro_prot_plus ,col= case_when(color == "color=178,223,138" ~ "#049101",
color == "color=204,204,204" ~ "#cccccc",
color == "color=251,128,114" ~ "#0C45FA",
color == "color=253,180,98"  ~ "#733700"),
### if you want to artificially increase the size of the gene: here doesn't work your genome is too dense
add= case_when(color == "color=178,223,138" ~ 3000,
color == "color=204,204,204" ~ 400,
color == "color=251,128,114" ~ 1000,
color == "color=253,180,98"  ~ 3000))
spiro_prot_minus=mutate(spiro_prot_minus ,col= case_when(color == "color=178,223,138" ~ "#049101",
color == "color=204,204,204" ~ "#cccccc",
color == "color=251,128,114" ~ "#0C45FA",
color == "color=253,180,98"  ~ "#733700"),
add= case_when(color == "color=178,223,138" ~ 3000,
color == "color=204,204,204" ~ 400,
color == "color=251,128,114" ~ 1000,
color == "color=253,180,98"  ~ 3000))
### GC content ###
spiro_GC_content= read.delim("gc_content.txt", sep=" ", header=F,stringsAsFactors = FALSE)
colnames(spiro_GC_content)=c("contig_names","xstart","xend","value","color")
### you need to have one column for the pos value and one for the neg value to plot with 2 different colors
spiro_GC_content=mutate(spiro_GC_content ,value_pos= case_when(value >= 0 ~ value,value < 0  ~ 0))
spiro_GC_content=mutate(spiro_GC_content ,value_neg= case_when(value >= 0 ~ 0,value < 0  ~ value))
spiro_GC_content=spiro_GC_content[,c("contig_names","xstart","xend","value_pos","value_neg")]
### GC skew ###
spiro_GC_skew=read.delim("gc_skew.txt", sep=" ", header=F,stringsAsFactors = FALSE)
colnames(spiro_GC_skew)=c("contig_names","xstart","xend","value","color")
spiro_GC_skew=mutate(spiro_GC_skew ,value_pos= case_when(value >= 0 ~ value,value < 0  ~ 0))
spiro_GC_skew=mutate(spiro_GC_skew ,value_neg= case_when(value >= 0 ~ 0,value < 0  ~ value))
spiro_GC_skew=spiro_GC_skew[,c("contig_names","xstart","xend","value_pos","value_neg")]
### Plot ###
fs=15 ### font size
### stupid way to create the axis legend
a=c(0)
b=0
for (i in 1:28){
b=b+0.1
a=c(a,b)
}
a
brk <- a*10^6
pdf("try_6.pdf",width=10,height=10)
#tiff("try_5.tiff",,width=15,height=15,units="cm", res=800)
circos.clear()
df = data.frame(
name  = c("contig_1"),
start = c(0),
end   = c(spiro_size))
circos.par(gap.degree=0, start.degree= 90 , cell.padding = c(0.01, 0, 0.01, 0))
circos.initialize(sectors=c("contig_1"),xlim=c(0,spiro_size))
# Genomic Features
# + strand
circos.track(ylim = c(1, 3),
#bg.col = c("#e0e0e0"),
bg.border = NA, track.height = 0.175, panel.fun = function(x, y){circos.axis(h="top",major.at=brk,labels=round(brk/10^6,1),labels.cex=0.9,lwd=0.7,labels.facing="clockwise")})
#circos.lines(c(0,1767095),c(1,1))
for (i in 1:nrow(spiro_prot_plus)){
circos.rect(spiro_prot_plus$xstart[i]-spiro_prot_plus$add[i], spiro_prot_plus$ystart[i],
spiro_prot_plus$xend[i]+spiro_prot_plus$add[i], spiro_prot_plus$yend[i],
col = spiro_prot_plus$col[i], border = spiro_prot_plus$col[i],lwd=0.01)
}
for (i in 1:nrow(spiro_prot_minus)){
circos.rect(spiro_prot_minus$xstart[i]-spiro_prot_minus$add[i], spiro_prot_minus$ystart[i],
spiro_prot_minus$xend[i]+spiro_prot_minus$add[i], spiro_prot_minus$yend[i],
col =  spiro_prot_minus$col[i], border =  spiro_prot_minus$col[i],lwd=0.01)
}
circos.text(0, 2, "A", cex=0.9,font = 2)
#GC content
circos.genomicTrack(data=spiro_GC_content,ylim=c(-0.205,0.20),bg.border = NA, track.height = 0.15,panel.fun=function(region,value,...) {
circos.genomicLines(region,value,type="l",border=c("#cccccc","#3f4a3c"),col=c("#cccccc","#3f4a3c")
, lwd=0.3,baseline=c(0,0), area=TRUE, )
circos.text(0, 0.12, "B", cex=0.9,font = 2)
})
# GC skew
circos.genomicTrack(data=spiro_GC_skew,ylim=c(-0.26,0.35),bg.border = NA, track.height = 0.15,panel.fun=function(region,value,...) {
circos.genomicLines(region,value,type="l",border=c("#049101","#930198"),col=c("#049101","#930198"), lwd=0.3, baseline=c(0,0), area=TRUE )
circos.text(0, 0.35, "C", cex=0.9,font = 2)
})
lgd_points_A_1= Legend(labels=c("CDS", "rRNA"),labels_gp=gpar(fontsize = fs),
legend_gp =gpar(fill = c("#cccccc","#0C45FA")), title_position = "lefttop",
title = "A",title_gp = gpar(fontsize = fs, fontface = "bold"),grid_height = unit(4, "mm"), grid_width = unit(4.5, "mm"))
lgd_points_A_2= Legend(labels=c("tRNA/tmRNA", "ncRNA"),labels_gp=gpar(fontsize = fs),
legend_gp =gpar(fill = c("#049101","#733700")), title_position = "lefttop",
grid_height = unit(4, "mm"), grid_width = unit(4.5, "mm"))
lgd_points_C = Legend(labels=c("GC content above average", "GC content below average"),labels_gp=gpar(fontsize = fs), title_position = "lefttop",  #type = "lines",
legend_gp =gpar(fill=c("#cccccc","#3f4a3c")),
title = "B",title_gp = gpar(fontsize =fs, fontface = "bold"),grid_height = unit(4, "mm"), grid_width = unit(4.5, "mm"))
lgd_points_D = Legend(labels=c("+ GC skew", "\u2212 GC skew"),labels_gp=gpar(fontsize = fs),title_position = "lefttop", #type = "lines",
legend_gp =gpar(fill=c("#049101","#930198")),
title = "C",title_gp = gpar(fontsize = fs, fontface = "bold"),grid_height = unit(4, "mm"), grid_width = unit(4.5, "mm"))
pd_1 = packLegend(lgd_points_A_1,lgd_points_A_2 , direction="horizontal", gap = unit(1, "mm"))
pd_2 = packLegend(lgd_points_C, lgd_points_D, direction="vertical", gap = unit(1, "mm"))
pd=packLegend(pd_1, pd_2, direction = "vertical", gap = unit(1, "mm"))
draw(pd, just = c("left", "bottom"),x = unit(10, "cm"), y = unit(11, "cm"))
dev.off()
library(dplyr)
selectionStats_Glugo <- read.delim("~/Downloads/selectionStats_Glugo.txt")
selectionStats_Glugo <- read.delim("~/OneDrive - Universität Basel/glugoides/analysis/selection_tests/selectionStats_Glugo.txt")
selectionStats_Glugo$Alignment <- gsub(".allmasked.fasta.oneline", "", selectionStats_Glugo$Alignment)
selectionStats_Glugo$pin <- selectionStats_Glugo$PiN / selectionStats_Glugo$NumN
selectionStats_Glugo$pis <- selectionStats_Glugo$PiS / selectionStats_Glugo$NumS
selectionStats_Glugo$pi_ratio <- selectionStats_Glugo$pin /selectionStats_Glugo$pis
summary(selectionStats_Glugo)
hist(selectionStats_Glugo$pin, breaks = 20)
hist(selectionStats_Glugo$pis, breaks = 20)
hist(selectionStats_Glugo$pi_ratio, breaks = 20)
View(selectionStats_Glugo)
paml_Glugo <- read.delim("~/OneDrive - Universität Basel/glugoides/analysis/selection_tests/PAML_DnDs_Estimates_aligned_masked_Glugo.tsv", header = F)
colnames(paml_Glugo) <- c("Alignment", "t", "S", "N", "dN/dS", "dN", "dS")
paml_Glugo$Alignment <- gsub(".aligned_masked", "", paml_Glugo$Alignment)
stats_table_glugo <- merge(selectionStats_Glugo, paml_Glugo, by = "Alignment")[-(ncol(selectionStats_Glugo)+ncol(paml_Glugo)-1)]
stats_table_glugo %>%
arrange(desc(is.finite(pi_ratio)), desc(pi_ratio))
write.table("stats_table.tsv")
write.table(file = "stats_table.tsv", stats_table_glugo)
write.csv(file = "stats_table.tsv", stats_table_glugo)
write.table(file = "stats_table.tsv", stats_table_glugo)
write.table(file = "stats_table.tsv", stats_table_glugo,               row.names = F,
col.names = F,
quote = F,
sep = '\t')
View(stats_table_glugo)
